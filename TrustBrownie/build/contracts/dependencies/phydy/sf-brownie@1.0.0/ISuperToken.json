{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "AgreementCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "penaltyAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "AgreementLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidatorAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "penaltyAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bailoutAmount",
          "type": "uint256"
        }
      ],
      "name": "AgreementLiquidatedBy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidatorAccount",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "targetAccountBalanceDelta",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "liquidationTypeData",
          "type": "bytes"
        }
      ],
      "name": "AgreementLiquidatedV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        }
      ],
      "name": "AgreementStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "AgreementTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "AgreementUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenHolder",
          "type": "address"
        }
      ],
      "name": "AuthorizedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bailoutAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bailoutAmount",
          "type": "uint256"
        }
      ],
      "name": "Bailout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "Burned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenHolder",
          "type": "address"
        }
      ],
      "name": "RevokedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "Sent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDowngraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "authorizeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "createAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "downgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountActiveAgreements",
      "outputs": [
        {
          "internalType": "contract ISuperAgreement[]",
          "name": "activeAgreements",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "dataLength",
          "type": "uint256"
        }
      ],
      "name": "getAgreementData",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agreementClass",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dataLength",
          "type": "uint256"
        }
      ],
      "name": "getAgreementStateSlot",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "slotData",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHost",
      "outputs": [
        {
          "internalType": "address",
          "name": "host",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "granularity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "underlyingToken",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "underlyingDecimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "n",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "s",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "isAccountCritical",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isCritical",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAccountCriticalNow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isCritical",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "isAccountSolvent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSolvent",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAccountSolventNow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSolvent",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenHolder",
          "type": "address"
        }
      ],
      "name": "isOperatorFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "liquidationTypeData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "liquidatorAccount",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useDefaultRewardAccount",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "targetAccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "targetAccountBalanceDelta",
          "type": "int256"
        }
      ],
      "name": "makeLiquidationPayoutsV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationDowngrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "operationUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "operatorBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "operatorSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "realtimeBalanceOf",
      "outputs": [
        {
          "internalType": "int256",
          "name": "availableBalance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "realtimeBalanceOfNow",
      "outputs": [
        {
          "internalType": "int256",
          "name": "availableBalance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "owedDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "revokeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "selfApproveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "selfBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "selfMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "selfTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "delta",
          "type": "int256"
        }
      ],
      "name": "settleBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "dataLength",
          "type": "uint256"
        }
      ],
      "name": "terminateAgreement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "updateAgreementData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slotId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "slotData",
          "type": "bytes32[]"
        }
      ],
      "name": "updateAgreementStateSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "10": "/home/phydy/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC777/IERC777.sol",
    "21": "/home/phydy/.brownie/packages/phydy/sf-brownie@1.0.0/interfaces/superfluid/ISuperToken.sol",
    "25": "/home/phydy/.brownie/packages/phydy/sf-brownie@1.0.0/interfaces/superfluid/ISuperfluidToken.sol",
    "27": "/home/phydy/.brownie/packages/phydy/sf-brownie@1.0.0/interfaces/tokens/TokenInfo.sol",
    "7": "/home/phydy/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC20/IERC20.sol"
  },
  "ast": {
    "absolutePath": "/home/phydy/.brownie/packages/phydy/sf-brownie@1.0.0/interfaces/superfluid/ISuperToken.sol",
    "exportedSymbols": {
      "IERC20": [
        5035
      ],
      "IERC777": [
        10429
      ],
      "ISuperToken": [
        7772
      ],
      "ISuperfluid": [
        6086
      ],
      "ISuperfluidToken": [
        10254
      ],
      "TokenInfo": [
        11149
      ]
    },
    "id": 7773,
    "license": "AGPLv3",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7398,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:24:21"
      },
      {
        "absolutePath": "/home/phydy/.brownie/packages/phydy/sf-brownie@1.0.0/interfaces/superfluid/ISuperfluid.sol",
        "file": "./ISuperfluid.sol",
        "id": 7400,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7773,
        "sourceUnit": 6087,
        "src": "61:46:21",
        "symbolAliases": [
          {
            "foreign": {
              "id": 7399,
              "name": "ISuperfluid",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 6086,
              "src": "69:11:21",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/phydy/.brownie/packages/phydy/sf-brownie@1.0.0/interfaces/superfluid/ISuperfluidToken.sol",
        "file": "./ISuperfluidToken.sol",
        "id": 7402,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7773,
        "sourceUnit": 10255,
        "src": "108:56:21",
        "symbolAliases": [
          {
            "foreign": {
              "id": 7401,
              "name": "ISuperfluidToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 10254,
              "src": "116:16:21",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/phydy/.brownie/packages/phydy/sf-brownie@1.0.0/interfaces/tokens/TokenInfo.sol",
        "file": "../tokens/TokenInfo.sol",
        "id": 7404,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7773,
        "sourceUnit": 11150,
        "src": "165:50:21",
        "symbolAliases": [
          {
            "foreign": {
              "id": 7403,
              "name": "TokenInfo",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 11149,
              "src": "173:9:21",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/phydy/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC777/IERC777.sol",
        "file": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
        "id": 7406,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7773,
        "sourceUnit": 10430,
        "src": "216:73:21",
        "symbolAliases": [
          {
            "foreign": {
              "id": 7405,
              "name": "IERC777",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 10429,
              "src": "224:7:21",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/phydy/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.6.0/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "id": 7408,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7773,
        "sourceUnit": 5036,
        "src": "290:70:21",
        "symbolAliases": [
          {
            "foreign": {
              "id": 7407,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 5035,
              "src": "298:6:21",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 7410,
              "name": "ISuperfluidToken",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 10254,
              "src": "485:16:21"
            },
            "id": 7411,
            "nodeType": "InheritanceSpecifier",
            "src": "485:16:21"
          },
          {
            "baseName": {
              "id": 7412,
              "name": "TokenInfo",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 11149,
              "src": "503:9:21"
            },
            "id": 7413,
            "nodeType": "InheritanceSpecifier",
            "src": "503:9:21"
          },
          {
            "baseName": {
              "id": 7414,
              "name": "IERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5035,
              "src": "514:6:21"
            },
            "id": 7415,
            "nodeType": "InheritanceSpecifier",
            "src": "514:6:21"
          },
          {
            "baseName": {
              "id": 7416,
              "name": "IERC777",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 10429,
              "src": "522:7:21"
            },
            "id": 7417,
            "nodeType": "InheritanceSpecifier",
            "src": "522:7:21"
          }
        ],
        "canonicalName": "ISuperToken",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 7409,
          "nodeType": "StructuredDocumentation",
          "src": "362:97:21",
          "text": " @title Super token (Superfluid Token + ERC20 + ERC777) interface\n @author Superfluid"
        },
        "fullyImplemented": false,
        "id": 7772,
        "linearizedBaseContracts": [
          7772,
          10429,
          5035,
          11149,
          10254
        ],
        "name": "ISuperToken",
        "nameLocation": "470:11:21",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 7418,
              "nodeType": "StructuredDocumentation",
              "src": "536:47:21",
              "text": " @dev Initialize the contract"
            },
            "functionSelector": "42fe0980",
            "id": 7430,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "597:10:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7428,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7421,
                  "mutability": "mutable",
                  "name": "underlyingToken",
                  "nameLocation": "624:15:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7430,
                  "src": "617:22:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$5035",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 7420,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 7419,
                      "name": "IERC20",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 5035,
                      "src": "617:6:21"
                    },
                    "referencedDeclaration": 5035,
                    "src": "617:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$5035",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7423,
                  "mutability": "mutable",
                  "name": "underlyingDecimals",
                  "nameLocation": "655:18:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7430,
                  "src": "649:24:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 7422,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "649:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7425,
                  "mutability": "mutable",
                  "name": "n",
                  "nameLocation": "699:1:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7430,
                  "src": "683:17:21",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 7424,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "683:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7427,
                  "mutability": "mutable",
                  "name": "s",
                  "nameLocation": "726:1:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7430,
                  "src": "710:17:21",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 7426,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "710:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "607:126:21"
            },
            "returnParameters": {
              "id": 7429,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "742:0:21"
            },
            "scope": 7772,
            "src": "588:155:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10315,
              11136
            ],
            "documentation": {
              "id": 7431,
              "nodeType": "StructuredDocumentation",
              "src": "936:54:21",
              "text": " @dev Returns the name of the token."
            },
            "functionSelector": "06fdde03",
            "id": 7439,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nameLocation": "1004:4:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7435,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7433,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "1058:7:21"
                },
                {
                  "id": 7434,
                  "name": "TokenInfo",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 11149,
                  "src": "1067:9:21"
                }
              ],
              "src": "1049:28:21"
            },
            "parameters": {
              "id": 7432,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1008:2:21"
            },
            "returnParameters": {
              "id": 7438,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7437,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7439,
                  "src": "1095:13:21",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 7436,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1095:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1094:15:21"
            },
            "scope": 7772,
            "src": "995:115:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10321,
              11142
            ],
            "documentation": {
              "id": 7440,
              "nodeType": "StructuredDocumentation",
              "src": "1116:102:21",
              "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
            },
            "functionSelector": "95d89b41",
            "id": 7448,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nameLocation": "1232:6:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7444,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7442,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "1288:7:21"
                },
                {
                  "id": 7443,
                  "name": "TokenInfo",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 11149,
                  "src": "1297:9:21"
                }
              ],
              "src": "1279:28:21"
            },
            "parameters": {
              "id": 7441,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1238:2:21"
            },
            "returnParameters": {
              "id": 7447,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7446,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7448,
                  "src": "1325:13:21",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 7445,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1325:6:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1324:15:21"
            },
            "scope": 7772,
            "src": "1223:117:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              11148
            ],
            "documentation": {
              "id": 7449,
              "nodeType": "StructuredDocumentation",
              "src": "1346:668:21",
              "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n NOTE: SuperToken always uses 18 decimals.\n Note: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "functionSelector": "313ce567",
            "id": 7456,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nameLocation": "2028:8:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7452,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7451,
                  "name": "TokenInfo",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 11149,
                  "src": "2062:9:21"
                }
              ],
              "src": "2053:19:21"
            },
            "parameters": {
              "id": 7450,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2036:2:21"
            },
            "returnParameters": {
              "id": 7455,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7454,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7456,
                  "src": "2082:5:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 7453,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "2082:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2081:7:21"
            },
            "scope": 7772,
            "src": "2019:70:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              4984,
              10333
            ],
            "documentation": {
              "id": 7457,
              "nodeType": "StructuredDocumentation",
              "src": "2278:49:21",
              "text": " @dev See {IERC20-totalSupply}."
            },
            "functionSelector": "18160ddd",
            "id": 7465,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "2341:11:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7461,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7459,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "2402:7:21"
                },
                {
                  "id": 7460,
                  "name": "IERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5035,
                  "src": "2411:6:21"
                }
              ],
              "src": "2393:25:21"
            },
            "parameters": {
              "id": 7458,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2352:2:21"
            },
            "returnParameters": {
              "id": 7464,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7463,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7465,
                  "src": "2436:7:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7462,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2436:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2435:9:21"
            },
            "scope": 7772,
            "src": "2332:113:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              4992,
              10341
            ],
            "documentation": {
              "id": 7466,
              "nodeType": "StructuredDocumentation",
              "src": "2451:83:21",
              "text": " @dev Returns the amount of tokens owned by an account (`owner`)."
            },
            "functionSelector": "70a08231",
            "id": 7476,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "2548:9:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7472,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7470,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "2622:7:21"
                },
                {
                  "id": 7471,
                  "name": "IERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5035,
                  "src": "2631:6:21"
                }
              ],
              "src": "2613:25:21"
            },
            "parameters": {
              "id": 7469,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7468,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "2566:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7476,
                  "src": "2558:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7467,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2558:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2557:17:21"
            },
            "returnParameters": {
              "id": 7475,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7474,
                  "mutability": "mutable",
                  "name": "balance",
                  "nameLocation": "2664:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7476,
                  "src": "2656:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7473,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2656:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2655:17:21"
            },
            "scope": 7772,
            "src": "2539:134:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              5002
            ],
            "documentation": {
              "id": 7477,
              "nodeType": "StructuredDocumentation",
              "src": "2853:225:21",
              "text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
            },
            "functionSelector": "a9059cbb",
            "id": 7488,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nameLocation": "3092:8:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7484,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7483,
                  "name": "IERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5035,
                  "src": "3170:6:21"
                }
              ],
              "src": "3161:16:21"
            },
            "parameters": {
              "id": 7482,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7479,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "3109:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7488,
                  "src": "3101:17:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7478,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3101:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7481,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3128:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7488,
                  "src": "3120:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7480,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3120:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3100:35:21"
            },
            "returnParameters": {
              "id": 7487,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7486,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7488,
                  "src": "3195:4:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 7485,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3195:4:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3194:6:21"
            },
            "scope": 7772,
            "src": "3083:118:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              5012
            ],
            "documentation": {
              "id": 7489,
              "nodeType": "StructuredDocumentation",
              "src": "3207:280:21",
              "text": " @dev Returns the remaining number of tokens that `spender` will be\n         allowed to spend on behalf of `owner` through {transferFrom}. This is\n         zero by default.\n This value changes when {approve} or {transferFrom} are called."
            },
            "functionSelector": "dd62ed3e",
            "id": 7500,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nameLocation": "3501:9:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7496,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7495,
                  "name": "IERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5035,
                  "src": "3590:6:21"
                }
              ],
              "src": "3581:16:21"
            },
            "parameters": {
              "id": 7494,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7491,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "3519:5:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7500,
                  "src": "3511:13:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7490,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3511:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7493,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "3534:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7500,
                  "src": "3526:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7492,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3526:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3510:32:21"
            },
            "returnParameters": {
              "id": 7499,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7498,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7500,
                  "src": "3615:7:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7497,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3615:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3614:9:21"
            },
            "scope": 7772,
            "src": "3492:132:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              5022
            ],
            "documentation": {
              "id": 7501,
              "nodeType": "StructuredDocumentation",
              "src": "3630:658:21",
              "text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
            },
            "functionSelector": "095ea7b3",
            "id": 7512,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nameLocation": "4302:7:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7508,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7507,
                  "name": "IERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5035,
                  "src": "4377:6:21"
                }
              ],
              "src": "4368:16:21"
            },
            "parameters": {
              "id": 7506,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7503,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "4318:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7512,
                  "src": "4310:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7502,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4310:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7505,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4335:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7512,
                  "src": "4327:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7504,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4327:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4309:33:21"
            },
            "returnParameters": {
              "id": 7511,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7510,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7512,
                  "src": "4402:4:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 7509,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4402:4:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4401:6:21"
            },
            "scope": 7772,
            "src": "4293:115:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              5034
            ],
            "documentation": {
              "id": 7513,
              "nodeType": "StructuredDocumentation",
              "src": "4414:328:21",
              "text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n         allowance mechanism. `amount` is then deducted from the caller's\n         allowance.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
            },
            "functionSelector": "23b872dd",
            "id": 7526,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nameLocation": "4756:12:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7522,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7521,
                  "name": "IERC20",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5035,
                  "src": "4868:6:21"
                }
              ],
              "src": "4859:16:21"
            },
            "parameters": {
              "id": 7520,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7515,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "4786:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7526,
                  "src": "4778:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7514,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4778:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7517,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "4810:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7526,
                  "src": "4802:17:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7516,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4802:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7519,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4837:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7526,
                  "src": "4829:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7518,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4829:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4768:81:21"
            },
            "returnParameters": {
              "id": 7525,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7524,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7526,
                  "src": "4885:4:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 7523,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4885:4:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4884:6:21"
            },
            "scope": 7772,
            "src": "4747:144:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7527,
              "nodeType": "StructuredDocumentation",
              "src": "4897:384:21",
              "text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "39509351",
            "id": 7536,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "increaseAllowance",
            "nameLocation": "5295:17:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7532,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7529,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "5321:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7536,
                  "src": "5313:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7528,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5313:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7531,
                  "mutability": "mutable",
                  "name": "addedValue",
                  "nameLocation": "5338:10:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7536,
                  "src": "5330:18:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7530,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5330:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5312:37:21"
            },
            "returnParameters": {
              "id": 7535,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7534,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7536,
                  "src": "5384:4:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 7533,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5384:4:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5383:6:21"
            },
            "scope": 7772,
            "src": "5286:104:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7537,
              "nodeType": "StructuredDocumentation",
              "src": "5396:476:21",
              "text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
            },
            "functionSelector": "a457c2d7",
            "id": 7546,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "decreaseAllowance",
            "nameLocation": "5886:17:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7542,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7539,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "5912:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7546,
                  "src": "5904:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7538,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5904:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7541,
                  "mutability": "mutable",
                  "name": "subtractedValue",
                  "nameLocation": "5929:15:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7546,
                  "src": "5921:23:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7540,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5921:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5903:42:21"
            },
            "returnParameters": {
              "id": 7545,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7544,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7546,
                  "src": "5980:4:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 7543,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5980:4:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5979:6:21"
            },
            "scope": 7772,
            "src": "5877:109:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10327
            ],
            "documentation": {
              "id": 7547,
              "nodeType": "StructuredDocumentation",
              "src": "6167:302:21",
              "text": " @dev Returns the smallest part of the token that is not divisible. This\n         means all token operations (creation, movement and destruction) must have\n         amounts that are a multiple of this number.\n For super token contracts, this value is 1 always"
            },
            "functionSelector": "556f0dc7",
            "id": 7554,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "granularity",
            "nameLocation": "6483:11:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7550,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7549,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "6520:7:21"
                }
              ],
              "src": "6511:17:21"
            },
            "parameters": {
              "id": 7548,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6494:2:21"
            },
            "returnParameters": {
              "id": 7553,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7552,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7554,
                  "src": "6538:7:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7551,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6538:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6537:9:21"
            },
            "scope": 7772,
            "src": "6474:73:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10351
            ],
            "documentation": {
              "id": 7555,
              "nodeType": "StructuredDocumentation",
              "src": "6553:600:21",
              "text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n @dev If send or receive hooks are registered for the caller and `recipient`,\n      the corresponding functions will be called with `data` and empty\n      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - the caller must have at least `amount` tokens.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
            },
            "functionSelector": "9bd9bbc6",
            "id": 7566,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "send",
            "nameLocation": "7167:4:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7564,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7563,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "7276:7:21"
                }
              ],
              "src": "7267:17:21"
            },
            "parameters": {
              "id": 7562,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7557,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "7189:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7566,
                  "src": "7181:17:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7556,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7181:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7559,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "7216:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7566,
                  "src": "7208:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7558,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7208:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7561,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "7247:4:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7566,
                  "src": "7232:19:21",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 7560,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "7232:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7171:86:21"
            },
            "returnParameters": {
              "id": 7565,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7284:0:21"
            },
            "scope": 7772,
            "src": "7158:127:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10359
            ],
            "documentation": {
              "id": 7567,
              "nodeType": "StructuredDocumentation",
              "src": "7291:404:21",
              "text": " @dev Destroys `amount` tokens from the caller's account, reducing the\n total supply.\n If a send hook is registered for the caller, the corresponding function\n will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - the caller must have at least `amount` tokens."
            },
            "functionSelector": "fe9d9303",
            "id": 7576,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "7709:4:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7574,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7573,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "7785:7:21"
                }
              ],
              "src": "7776:17:21"
            },
            "parameters": {
              "id": 7572,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7569,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "7722:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7576,
                  "src": "7714:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7568,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7714:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7571,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "7745:4:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7576,
                  "src": "7730:19:21",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 7570,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "7730:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7713:37:21"
            },
            "returnParameters": {
              "id": 7575,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7793:0:21"
            },
            "scope": 7772,
            "src": "7700:94:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10369
            ],
            "documentation": {
              "id": 7577,
              "nodeType": "StructuredDocumentation",
              "src": "7800:249:21",
              "text": " @dev Returns true if an account is an operator of `tokenHolder`.\n Operators can send and burn tokens on behalf of their owners. All\n accounts are their own operator.\n See {operatorSend} and {operatorBurn}."
            },
            "functionSelector": "d95b6371",
            "id": 7588,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isOperatorFor",
            "nameLocation": "8063:13:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7584,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7583,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "8163:7:21"
                }
              ],
              "src": "8154:17:21"
            },
            "parameters": {
              "id": 7582,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7579,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "8085:8:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7588,
                  "src": "8077:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7578,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8077:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7581,
                  "mutability": "mutable",
                  "name": "tokenHolder",
                  "nameLocation": "8103:11:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7588,
                  "src": "8095:19:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7580,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8095:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8076:39:21"
            },
            "returnParameters": {
              "id": 7587,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7586,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7588,
                  "src": "8189:4:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 7585,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8189:4:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8188:6:21"
            },
            "scope": 7772,
            "src": "8054:141:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10375
            ],
            "documentation": {
              "id": 7589,
              "nodeType": "StructuredDocumentation",
              "src": "8201:233:21",
              "text": " @dev Make an account an operator of the caller.\n See {isOperatorFor}.\n Emits an {AuthorizedOperator} event.\n Requirements\n - `operator` cannot be calling address."
            },
            "functionSelector": "959b8c3f",
            "id": 7596,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "authorizeOperator",
            "nameLocation": "8448:17:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7594,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7593,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "8502:7:21"
                }
              ],
              "src": "8493:17:21"
            },
            "parameters": {
              "id": 7592,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7591,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "8474:8:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7596,
                  "src": "8466:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7590,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8466:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8465:18:21"
            },
            "returnParameters": {
              "id": 7595,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8510:0:21"
            },
            "scope": 7772,
            "src": "8439:72:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10381
            ],
            "documentation": {
              "id": 7597,
              "nodeType": "StructuredDocumentation",
              "src": "8517:261:21",
              "text": " @dev Revoke an account's operator status for the caller.\n See {isOperatorFor} and {defaultOperators}.\n Emits a {RevokedOperator} event.\n Requirements\n - `operator` cannot be calling address."
            },
            "functionSelector": "fad8b32a",
            "id": 7604,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "revokeOperator",
            "nameLocation": "8792:14:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7602,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7601,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "8843:7:21"
                }
              ],
              "src": "8834:17:21"
            },
            "parameters": {
              "id": 7600,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7599,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "8815:8:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7604,
                  "src": "8807:16:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7598,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8807:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8806:18:21"
            },
            "returnParameters": {
              "id": 7603,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8851:0:21"
            },
            "scope": 7772,
            "src": "8783:69:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10388
            ],
            "documentation": {
              "id": 7605,
              "nodeType": "StructuredDocumentation",
              "src": "8858:338:21",
              "text": " @dev Returns the list of default operators. These accounts are operators\n for all token holders, even if {authorizeOperator} was never called on\n them.\n This list is immutable, but individual holders may revoke these via\n {revokeOperator}, in which case {isOperatorFor} will return false."
            },
            "functionSelector": "06e48538",
            "id": 7613,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "defaultOperators",
            "nameLocation": "9210:16:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7608,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7607,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "9276:7:21"
                }
              ],
              "src": "9267:17:21"
            },
            "parameters": {
              "id": 7606,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9226:2:21"
            },
            "returnParameters": {
              "id": 7612,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7611,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 7613,
                  "src": "9302:16:21",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 7609,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "9302:7:21",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 7610,
                    "nodeType": "ArrayTypeName",
                    "src": "9302:9:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9301:18:21"
            },
            "scope": 7772,
            "src": "9201:119:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10402
            ],
            "documentation": {
              "id": 7614,
              "nodeType": "StructuredDocumentation",
              "src": "9326:714:21",
              "text": " @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n be an operator of `sender`.\n If send or receive hooks are registered for `sender` and `recipient`,\n the corresponding functions will be called with `data` and\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - `sender` cannot be the zero address.\n - `sender` must have at least `amount` tokens.\n - the caller must be an operator for `sender`.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
            },
            "functionSelector": "62ad1b83",
            "id": 7629,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operatorSend",
            "nameLocation": "10054:12:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7627,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7626,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "10232:7:21"
                }
              ],
              "src": "10223:17:21"
            },
            "parameters": {
              "id": 7625,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7616,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "10084:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7629,
                  "src": "10076:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7615,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10076:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7618,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "10108:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7629,
                  "src": "10100:17:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7617,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10100:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7620,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "10135:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7629,
                  "src": "10127:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7619,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10127:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7622,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "10166:4:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7629,
                  "src": "10151:19:21",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 7621,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10151:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7624,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nameLocation": "10195:12:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7629,
                  "src": "10180:27:21",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 7623,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10180:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10066:147:21"
            },
            "returnParameters": {
              "id": 7628,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10240:0:21"
            },
            "scope": 7772,
            "src": "10045:196:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              10414
            ],
            "documentation": {
              "id": 7630,
              "nodeType": "StructuredDocumentation",
              "src": "10247:532:21",
              "text": " @dev Destroys `amount` tokens from `account`, reducing the total supply.\n The caller must be an operator of `account`.\n If a send hook is registered for `account`, the corresponding function\n will be called with `data` and `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens.\n - the caller must be an operator for `account`."
            },
            "functionSelector": "fc673c4f",
            "id": 7643,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operatorBurn",
            "nameLocation": "10793:12:21",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 7641,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 7640,
                  "name": "IERC777",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10429,
                  "src": "10945:7:21"
                }
              ],
              "src": "10936:17:21"
            },
            "parameters": {
              "id": 7639,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7632,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "10823:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7643,
                  "src": "10815:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7631,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10815:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7634,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "10848:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7643,
                  "src": "10840:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7633,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10840:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7636,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "10879:4:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7643,
                  "src": "10864:19:21",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 7635,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10864:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7638,
                  "mutability": "mutable",
                  "name": "operatorData",
                  "nameLocation": "10908:12:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7643,
                  "src": "10893:27:21",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 7637,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "10893:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10805:121:21"
            },
            "returnParameters": {
              "id": 7642,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10953:0:21"
            },
            "scope": 7772,
            "src": "10784:170:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7644,
              "nodeType": "StructuredDocumentation",
              "src": "11162:99:21",
              "text": " @dev Mint new tokens for the account\n Modifiers:\n  - onlySelf"
            },
            "functionSelector": "c68d4283",
            "id": 7653,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "selfMint",
            "nameLocation": "11275:8:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7651,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7646,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "11301:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7653,
                  "src": "11293:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7645,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11293:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7648,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "11326:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7653,
                  "src": "11318:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7647,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11318:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7650,
                  "mutability": "mutable",
                  "name": "userData",
                  "nameLocation": "11355:8:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7653,
                  "src": "11342:21:21",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 7649,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "11342:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11283:86:21"
            },
            "returnParameters": {
              "id": 7652,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11378:0:21"
            },
            "scope": 7772,
            "src": "11266:113:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7654,
              "nodeType": "StructuredDocumentation",
              "src": "11385:104:21",
              "text": " @dev Burn existing tokens for the account\n Modifiers:\n  - onlySelf"
            },
            "functionSelector": "9d876741",
            "id": 7663,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "selfBurn",
            "nameLocation": "11503:8:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7661,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7656,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "11529:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7663,
                  "src": "11521:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7655,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11521:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7658,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "11554:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7663,
                  "src": "11546:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7657,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11546:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7660,
                  "mutability": "mutable",
                  "name": "userData",
                  "nameLocation": "11583:8:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7663,
                  "src": "11570:21:21",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 7659,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "11570:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11511:86:21"
            },
            "returnParameters": {
              "id": 7662,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11606:0:21"
            },
            "scope": 7772,
            "src": "11494:113:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7664,
              "nodeType": "StructuredDocumentation",
              "src": "11613:244:21",
              "text": " @dev Transfer `amount` tokens from the `sender` to `recipient`.\n If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n spend tokens of `sender`.\n Modifiers:\n  - onlySelf"
            },
            "functionSelector": "41b706be",
            "id": 7675,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "selfTransferFrom",
            "nameLocation": "11871:16:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7673,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7666,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "11905:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7675,
                  "src": "11897:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7665,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11897:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7668,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "11929:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7675,
                  "src": "11921:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7667,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11921:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7670,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "11954:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7675,
                  "src": "11946:17:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7669,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11946:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7672,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "11981:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7675,
                  "src": "11973:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7671,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11973:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11887:106:21"
            },
            "returnParameters": {
              "id": 7674,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12002:0:21"
            },
            "scope": 7772,
            "src": "11862:141:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7676,
              "nodeType": "StructuredDocumentation",
              "src": "12009:143:21",
              "text": " @dev Give `spender`, `amount` allowance to spend the tokens of\n `account`.\n Modifiers:\n  - onlySelf"
            },
            "functionSelector": "66a12fb6",
            "id": 7685,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "selfApproveFor",
            "nameLocation": "12166:14:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7683,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7678,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "12198:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7685,
                  "src": "12190:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7677,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12190:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7680,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "12223:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7685,
                  "src": "12215:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7679,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12215:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7682,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "12248:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7685,
                  "src": "12240:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7681,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12240:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12180:80:21"
            },
            "returnParameters": {
              "id": 7684,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12269:0:21"
            },
            "scope": 7772,
            "src": "12157:113:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7686,
              "nodeType": "StructuredDocumentation",
              "src": "12471:87:21",
              "text": " @dev Transfer all available balance from `msg.sender` to `recipient`"
            },
            "functionSelector": "a3a7e7f3",
            "id": 7691,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferAll",
            "nameLocation": "12572:11:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7689,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7688,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "12592:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7691,
                  "src": "12584:17:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7687,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12584:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12583:19:21"
            },
            "returnParameters": {
              "id": 7690,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12611:0:21"
            },
            "scope": 7772,
            "src": "12563:49:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7692,
              "nodeType": "StructuredDocumentation",
              "src": "12801:110:21",
              "text": " @dev Return the underlying token contract\n @return tokenAddr Underlying token address"
            },
            "functionSelector": "ee719bc8",
            "id": 7697,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getUnderlyingToken",
            "nameLocation": "12925:18:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7693,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12943:2:21"
            },
            "returnParameters": {
              "id": 7696,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7695,
                  "mutability": "mutable",
                  "name": "tokenAddr",
                  "nameLocation": "12977:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7697,
                  "src": "12969:17:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7694,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12969:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12968:19:21"
            },
            "scope": 7772,
            "src": "12916:72:21",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7698,
              "nodeType": "StructuredDocumentation",
              "src": "12994:259:21",
              "text": " @dev Upgrade ERC20 to SuperToken.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this\n function you should \u00b4approve\u00b4 this contract"
            },
            "functionSelector": "45977d03",
            "id": 7703,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "upgrade",
            "nameLocation": "13267:7:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7701,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7700,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "13283:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7703,
                  "src": "13275:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7699,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13275:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13274:16:21"
            },
            "returnParameters": {
              "id": 7702,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13299:0:21"
            },
            "scope": 7772,
            "src": "13258:42:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7704,
              "nodeType": "StructuredDocumentation",
              "src": "13306:402:21",
              "text": " @dev Upgrade ERC20 to SuperToken and transfer immediately\n @param to The account to received upgraded tokens\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @param data User data for the TokensRecipient callback\n NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this\n function you should \u00b4approve\u00b4 this contract"
            },
            "functionSelector": "5b9d09cc",
            "id": 7713,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeTo",
            "nameLocation": "13722:9:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7711,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7706,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "13749:2:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7713,
                  "src": "13741:10:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7705,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13741:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7708,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "13769:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7713,
                  "src": "13761:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7707,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13761:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7710,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "13800:4:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7713,
                  "src": "13785:19:21",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 7709,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "13785:5:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13731:79:21"
            },
            "returnParameters": {
              "id": 7712,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13819:0:21"
            },
            "scope": 7772,
            "src": "13713:107:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 7714,
              "nodeType": "StructuredDocumentation",
              "src": "13826:166:21",
              "text": " @dev Token upgrade event\n @param account Account where tokens are upgraded to\n @param amount Amount of tokens upgraded (in 18 decimals)"
            },
            "eventSelector": "25ca84076773b0455db53621c459ddc84fe40840e4932a62706a032566f399df",
            "id": 7720,
            "name": "TokenUpgraded",
            "nameLocation": "14003:13:21",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 7719,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7716,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "14033:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7720,
                  "src": "14017:23:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7715,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14017:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7718,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "14050:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7720,
                  "src": "14042:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7717,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14042:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14016:41:21"
            },
            "src": "13997:61:21"
          },
          {
            "documentation": {
              "id": 7721,
              "nodeType": "StructuredDocumentation",
              "src": "14064:158:21",
              "text": " @dev Downgrade SuperToken to ERC20.\n @dev It will call transfer to send tokens\n @param amount Number of tokens to be downgraded"
            },
            "functionSelector": "11bcc81e",
            "id": 7726,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "downgrade",
            "nameLocation": "14236:9:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7724,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7723,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "14254:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7726,
                  "src": "14246:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7722,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14246:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14245:16:21"
            },
            "returnParameters": {
              "id": 7725,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14270:0:21"
            },
            "scope": 7772,
            "src": "14227:44:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 7727,
              "nodeType": "StructuredDocumentation",
              "src": "14277:150:21",
              "text": " @dev Token downgrade event\n @param account Account whose tokens are upgraded\n @param amount Amount of tokens downgraded"
            },
            "eventSelector": "3bc27981aebbb57f9247dc00fde9d6cd91e4b230083fec3238fedbcba1f9ab3d",
            "id": 7733,
            "name": "TokenDowngraded",
            "nameLocation": "14438:15:21",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 7732,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7729,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "14470:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7733,
                  "src": "14454:23:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7728,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14454:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7731,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "14487:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7733,
                  "src": "14479:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7730,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14479:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14453:41:21"
            },
            "src": "14432:63:21"
          },
          {
            "documentation": {
              "id": 7734,
              "nodeType": "StructuredDocumentation",
              "src": "14686:277:21",
              "text": " @dev Perform ERC20 approve by host contract.\n @param account The account owner to be approved.\n @param spender The spender of account owner's funds.\n @param amount Number of tokens to be approved.\n Modifiers:\n  - onlyHost"
            },
            "functionSelector": "62aa5287",
            "id": 7743,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operationApprove",
            "nameLocation": "14977:16:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7741,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7736,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "15011:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7743,
                  "src": "15003:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7735,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15003:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7738,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "15036:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7743,
                  "src": "15028:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7737,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15028:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7740,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "15061:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7743,
                  "src": "15053:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7739,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15053:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14993:80:21"
            },
            "returnParameters": {
              "id": 7742,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15082:0:21"
            },
            "scope": 7772,
            "src": "14968:115:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7744,
              "nodeType": "StructuredDocumentation",
              "src": "15089:345:21",
              "text": " @dev Perform ERC20 transfer from by host contract.\n @param account The account to spend sender's funds.\n @param spender  The account where the funds is sent from.\n @param recipient The recipient of thefunds.\n @param amount Number of tokens to be transferred.\n Modifiers:\n  - onlyHost"
            },
            "functionSelector": "16d055d6",
            "id": 7755,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operationTransferFrom",
            "nameLocation": "15448:21:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7753,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7746,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "15487:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7755,
                  "src": "15479:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7745,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15479:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7748,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "15512:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7755,
                  "src": "15504:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7747,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15504:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7750,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "15537:9:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7755,
                  "src": "15529:17:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7749,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15529:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7752,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "15564:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7755,
                  "src": "15556:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7751,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15556:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15469:107:21"
            },
            "returnParameters": {
              "id": 7754,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15585:0:21"
            },
            "scope": 7772,
            "src": "15439:147:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7756,
              "nodeType": "StructuredDocumentation",
              "src": "15592:232:21",
              "text": " @dev Upgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n Modifiers:\n  - onlyHost"
            },
            "functionSelector": "ca789464",
            "id": 7763,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operationUpgrade",
            "nameLocation": "15838:16:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7761,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7758,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "15863:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7763,
                  "src": "15855:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7757,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15855:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7760,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "15880:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7763,
                  "src": "15872:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7759,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15872:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15854:33:21"
            },
            "returnParameters": {
              "id": 7762,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15896:0:21"
            },
            "scope": 7772,
            "src": "15829:68:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7764,
              "nodeType": "StructuredDocumentation",
              "src": "15903:236:21",
              "text": " @dev Downgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be downgraded (in 18 decimals)\n Modifiers:\n  - onlyHost"
            },
            "functionSelector": "245887fc",
            "id": 7771,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "operationDowngrade",
            "nameLocation": "16153:18:21",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7769,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7766,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "16180:7:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7771,
                  "src": "16172:15:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7765,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16172:7:21",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7768,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "16197:6:21",
                  "nodeType": "VariableDeclaration",
                  "scope": 7771,
                  "src": "16189:14:21",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7767,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16189:7:21",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16171:33:21"
            },
            "returnParameters": {
              "id": 7770,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "16213:0:21"
            },
            "scope": 7772,
            "src": "16144:70:21",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 7773,
        "src": "460:16289:21",
        "usedErrors": []
      }
    ],
    "src": "35:16715:21"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "ISuperToken",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.6.0/IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.6.0/IERC777",
    "phydy/sf-brownie@1.0.0/ISuperfluidToken",
    "phydy/sf-brownie@1.0.0/TokenInfo"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "author": "Superfluid",
    "events": {
      "TokenDowngraded(address,uint256)": {
        "details": "Token downgrade event",
        "params": {
          "account": "Account whose tokens are upgraded",
          "amount": "Amount of tokens downgraded"
        }
      },
      "TokenUpgraded(address,uint256)": {
        "details": "Token upgrade event",
        "params": {
          "account": "Account where tokens are upgraded to",
          "amount": "Amount of tokens upgraded (in 18 decimals)"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens.",
        "returns": {
          "_0": "Returns Success a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
        }
      },
      "authorizeOperator(address)": {
        "details": "Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by an account (`owner`)."
      },
      "burn(uint256,bytes)": {
        "details": "Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens."
      },
      "createAgreement(bytes32,bytes32[])": {
        "details": "Create a new agreement",
        "params": {
          "data": "Agreement data",
          "id": "Agreement ID"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: SuperToken always uses 18 decimals. Note: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "defaultOperators()": {
        "details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."
      },
      "downgrade(uint256)": {
        "details": "Downgrade SuperToken to ERC20.It will call transfer to send tokens",
        "params": {
          "amount": "Number of tokens to be downgraded"
        }
      },
      "getAccountActiveAgreements(address)": {
        "details": "An active agreement is one that has state for the account",
        "notice": "Get a list of agreements that is active for the account",
        "params": {
          "account": "Account to query"
        },
        "returns": {
          "activeAgreements": "List of accounts that have non-zero states for the account"
        }
      },
      "getAgreementData(address,bytes32,uint256)": {
        "details": "Get data of the agreement",
        "params": {
          "agreementClass": "Contract address of the agreement",
          "id": "Agreement ID"
        },
        "returns": {
          "data": "Data of the agreement"
        }
      },
      "getAgreementStateSlot(address,address,uint256,uint256)": {
        "details": "Get data of the slot of the state of an agreement",
        "params": {
          "account": "Account to query",
          "agreementClass": "Contract address of the agreement",
          "dataLength": "length of the state data",
          "slotId": "slot id of the state"
        }
      },
      "getHost()": {
        "details": "Get superfluid host contract address"
      },
      "getUnderlyingToken()": {
        "details": "Return the underlying token contract",
        "returns": {
          "tokenAddr": "Underlying token address"
        }
      },
      "granularity()": {
        "details": "Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number. For super token contracts, this value is 1 always"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,uint8,string,string)": {
        "details": "Initialize the contract"
      },
      "isAccountCritical(address,uint256)": {
        "details": "A critical account is when availableBalance < 0",
        "notice": "Check if account is critical",
        "params": {
          "account": "The account to check",
          "timestamp": "The time we'd like to check if the account is critical (should use future)"
        },
        "returns": {
          "isCritical": "Whether the account is critical"
        }
      },
      "isAccountCriticalNow(address)": {
        "details": "A critical account is when availableBalance < 0",
        "notice": "Check if account is critical now (current host.getNow())",
        "params": {
          "account": "The account to check"
        },
        "returns": {
          "isCritical": "Whether the account is critical"
        }
      },
      "isAccountSolvent(address,uint256)": {
        "details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
        "notice": "Check if account is solvent",
        "params": {
          "account": "The account to check",
          "timestamp": "The time we'd like to check if the account is solvent (should use future)"
        },
        "returns": {
          "isSolvent": "isSolvent"
        }
      },
      "isAccountSolventNow(address)": {
        "details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
        "notice": "Check if account is solvent now",
        "params": {
          "account": "The account to check"
        },
        "returns": {
          "isSolvent": "isSolvent"
        }
      },
      "isOperatorFor(address,address)": {
        "details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."
      },
      "makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": {
        "details": "Make liquidation payouts (v2)",
        "params": {
          "id": "Agreement ID",
          "liquidationTypeData": "Data regarding the version of the liquidation schema and the type",
          "liquidatorAccount": "Address of the executor of the liquidation",
          "rewardAmount": "The amount the reward recepient account will receive",
          "targetAccount": "Account of the stream sender",
          "targetAccountBalanceDelta": "The amount the sender account balance should change by - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount Modifiers:  - onlyAgreement",
          "useDefaultRewardAccount": "Whether or not the default reward account receives the rewardAmount"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "operationApprove(address,address,uint256)": {
        "details": "Perform ERC20 approve by host contract.",
        "params": {
          "account": "The account owner to be approved.",
          "amount": "Number of tokens to be approved. Modifiers:  - onlyHost",
          "spender": "The spender of account owner's funds."
        }
      },
      "operationDowngrade(address,uint256)": {
        "details": "Downgrade ERC20 to SuperToken by host contract.",
        "params": {
          "account": "The account to be changed.",
          "amount": "Number of tokens to be downgraded (in 18 decimals) Modifiers:  - onlyHost"
        }
      },
      "operationTransferFrom(address,address,address,uint256)": {
        "details": "Perform ERC20 transfer from by host contract.",
        "params": {
          "account": "The account to spend sender's funds.",
          "amount": "Number of tokens to be transferred. Modifiers:  - onlyHost",
          "recipient": "The recipient of thefunds.",
          "spender": "The account where the funds is sent from."
        }
      },
      "operationUpgrade(address,uint256)": {
        "details": "Upgrade ERC20 to SuperToken by host contract.",
        "params": {
          "account": "The account to be changed.",
          "amount": "Number of tokens to be upgraded (in 18 decimals) Modifiers:  - onlyHost"
        }
      },
      "operatorBurn(address,uint256,bytes,bytes)": {
        "details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`."
      },
      "operatorSend(address,address,uint256,bytes,bytes)": {
        "details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
      },
      "realtimeBalanceOf(address,uint256)": {
        "details": "Calculate the real balance of a user, taking in consideration all agreements of the account",
        "params": {
          "account": "for the query",
          "timestamp": "Time of balance"
        },
        "returns": {
          "availableBalance": "Real-time balance",
          "deposit": "Account deposit",
          "owedDeposit": "Account owed Deposit"
        }
      },
      "realtimeBalanceOfNow(address)": {
        "details": "realtimeBalanceOf with timestamp equals to block timestamp",
        "notice": "Calculate the realtime balance given the current host.getNow() value",
        "params": {
          "account": "for the query"
        },
        "returns": {
          "availableBalance": "Real-time balance",
          "deposit": "Account deposit",
          "owedDeposit": "Account owed Deposit"
        }
      },
      "revokeOperator(address)": {
        "details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address."
      },
      "selfApproveFor(address,address,uint256)": {
        "details": "Give `spender`, `amount` allowance to spend the tokens of `account`. Modifiers:  - onlySelf"
      },
      "selfBurn(address,uint256,bytes)": {
        "details": "Burn existing tokens for the account Modifiers:  - onlySelf"
      },
      "selfMint(address,uint256,bytes)": {
        "details": "Mint new tokens for the account Modifiers:  - onlySelf"
      },
      "selfTransferFrom(address,address,address,uint256)": {
        "details": "Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`. Modifiers:  - onlySelf"
      },
      "send(address,uint256,bytes)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
      },
      "settleBalance(address,int256)": {
        "details": "The agreement needs to make sure that the balance delta is balanced afterwards",
        "notice": "Settle balance from an account by the agreement",
        "params": {
          "account": "Account to query.",
          "delta": "Amount of balance delta to be settled Modifiers:  - onlyAgreement"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "terminateAgreement(bytes32,uint256)": {
        "details": "Close the agreement",
        "params": {
          "id": "Agreement ID"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`.",
        "returns": {
          "_0": "Returns Success a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
        }
      },
      "transferAll(address)": {
        "details": "Transfer all available balance from `msg.sender` to `recipient`"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.",
        "returns": {
          "_0": "Returns Success a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
        }
      },
      "updateAgreementData(bytes32,bytes32[])": {
        "details": "Create a new agreement",
        "params": {
          "data": "Agreement data",
          "id": "Agreement ID"
        }
      },
      "updateAgreementStateSlot(address,uint256,bytes32[])": {
        "details": "Update agreement state slot",
        "params": {
          "account": "Account to be updated NOTE - To clear the storage out, provide zero-ed array of intended length"
        }
      },
      "upgrade(uint256)": {
        "details": "Upgrade ERC20 to SuperToken.",
        "params": {
          "amount": "Number of tokens to be upgraded (in 18 decimals) NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this function you should \u00b4approve\u00b4 this contract"
        }
      },
      "upgradeTo(address,uint256,bytes)": {
        "details": "Upgrade ERC20 to SuperToken and transfer immediately",
        "params": {
          "amount": "Number of tokens to be upgraded (in 18 decimals)",
          "data": "User data for the TokensRecipient callback NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this function you should \u00b4approve\u00b4 this contract",
          "to": "The account to received upgraded tokens"
        }
      }
    },
    "title": "Super token (Superfluid Token + ERC20 + ERC777) interface",
    "version": 1
  },
  "offset": [
    460,
    16749
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "4bbd77e42f6cee99a8c3a8043ddf702f31dd6d43",
  "source": "// SPDX-License-Identifier: AGPLv3\npragma solidity >=0.8.0;\n\nimport {ISuperfluid} from \"./ISuperfluid.sol\";\nimport {ISuperfluidToken} from \"./ISuperfluidToken.sol\";\nimport {TokenInfo} from \"../tokens/TokenInfo.sol\";\nimport {IERC777} from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Super token (Superfluid Token + ERC20 + ERC777) interface\n * @author Superfluid\n */\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\n    /**\n     * @dev Initialize the contract\n     */\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    ) external;\n\n    /**************************************************************************\n     * TokenInfo & ERC777\n     *************************************************************************/\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name()\n        external\n        view\n        override(IERC777, TokenInfo)\n        returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol()\n        external\n        view\n        override(IERC777, TokenInfo)\n        returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: SuperToken always uses 18 decimals.\n     *\n     * Note: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view override(TokenInfo) returns (uint8);\n\n    /**************************************************************************\n     * ERC20 & ERC777\n     *************************************************************************/\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply()\n        external\n        view\n        override(IERC777, IERC20)\n        returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address account)\n        external\n        view\n        override(IERC777, IERC20)\n        returns (uint256 balance);\n\n    /**************************************************************************\n     * ERC20\n     *************************************************************************/\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        override(IERC20)\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     *         allowed to spend on behalf of `owner` through {transferFrom}. This is\n     *         zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        override(IERC20)\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount)\n        external\n        override(IERC20)\n        returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     *         allowance mechanism. `amount` is then deducted from the caller's\n     *         allowance.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue)\n        external\n        returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        external\n        returns (bool);\n\n    /**************************************************************************\n     * ERC777\n     *************************************************************************/\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     *         means all token operations (creation, movement and destruction) must have\n     *         amounts that are a multiple of this number.\n     *\n     * For super token contracts, this value is 1 always\n     */\n    function granularity() external view override(IERC777) returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @dev If send or receive hooks are registered for the caller and `recipient`,\n     *      the corresponding functions will be called with `data` and empty\n     *      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data)\n        external\n        override(IERC777);\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder)\n        external\n        view\n        override(IERC777)\n        returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators()\n        external\n        view\n        override(IERC777)\n        returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    /**\n     * @dev Mint new tokens for the account\n     *\n     * Modifiers:\n     *  - onlySelf\n     */\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n    /**\n     * @dev Burn existing tokens for the account\n     *\n     * Modifiers:\n     *  - onlySelf\n     */\n    function selfBurn(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n    /**\n     * @dev Transfer `amount` tokens from the `sender` to `recipient`.\n     * If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n     * spend tokens of `sender`.\n     *\n     * Modifiers:\n     *  - onlySelf\n     */\n    function selfTransferFrom(\n        address sender,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n     * @dev Give `spender`, `amount` allowance to spend the tokens of\n     * `account`.\n     *\n     * Modifiers:\n     *  - onlySelf\n     */\n    function selfApproveFor(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    /**\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\n     */\n    function transferAll(address recipient) external;\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /**\n     * @dev Return the underlying token contract\n     * @return tokenAddr Underlying token address\n     */\n    function getUnderlyingToken() external view returns (address tokenAddr);\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this\n     * function you should \u00b4approve\u00b4 this contract\n     */\n    function upgrade(uint256 amount) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\n     * @param to The account to received upgraded tokens\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @param data User data for the TokensRecipient callback\n     *\n     * NOTE: It will use \u00b4transferFrom\u00b4 to get tokens. Before calling this\n     * function you should \u00b4approve\u00b4 this contract\n     */\n    function upgradeTo(\n        address to,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Token upgrade event\n     * @param account Account where tokens are upgraded to\n     * @param amount Amount of tokens upgraded (in 18 decimals)\n     */\n    event TokenUpgraded(address indexed account, uint256 amount);\n\n    /**\n     * @dev Downgrade SuperToken to ERC20.\n     * @dev It will call transfer to send tokens\n     * @param amount Number of tokens to be downgraded\n     */\n    function downgrade(uint256 amount) external;\n\n    /**\n     * @dev Token downgrade event\n     * @param account Account whose tokens are upgraded\n     * @param amount Amount of tokens downgraded\n     */\n    event TokenDowngraded(address indexed account, uint256 amount);\n\n    /**************************************************************************\n     * Batch Operations\n     *************************************************************************/\n\n    /**\n     * @dev Perform ERC20 approve by host contract.\n     * @param account The account owner to be approved.\n     * @param spender The spender of account owner's funds.\n     * @param amount Number of tokens to be approved.\n     *\n     * Modifiers:\n     *  - onlyHost\n     */\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    /**\n     * @dev Perform ERC20 transfer from by host contract.\n     * @param account The account to spend sender's funds.\n     * @param spender  The account where the funds is sent from.\n     * @param recipient The recipient of thefunds.\n     * @param amount Number of tokens to be transferred.\n     *\n     * Modifiers:\n     *  - onlyHost\n     */\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken by host contract.\n     * @param account The account to be changed.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * Modifiers:\n     *  - onlyHost\n     */\n    function operationUpgrade(address account, uint256 amount) external;\n\n    /**\n     * @dev Downgrade ERC20 to SuperToken by host contract.\n     * @param account The account to be changed.\n     * @param amount Number of tokens to be downgraded (in 18 decimals)\n     *\n     * Modifiers:\n     *  - onlyHost\n     */\n    function operationDowngrade(address account, uint256 amount) external;\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * NOTE: solidity-coverage not supporting it\n     *************************************************************************/\n\n    /// @dev The msg.sender must be the contract itself\n    //modifier onlySelf() virtual\n}\n",
  "sourceMap": "",
  "sourcePath": "/home/phydy/.brownie/packages/phydy/sf-brownie@1.0.0/interfaces/superfluid/ISuperToken.sol",
  "type": "interface"
}